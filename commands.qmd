

# Common Commands

```{r setup-command}
#| message: FALSE 
library(tidyverse)
library(knitr)
library(kableExtra)
```

## Git Commands 

::: {.size_85em}
```{r}
tribble(
          ~Command, ~Description
    , "git status"               , "see which files have been changed/added/deleted on working branch"
    , "git add --all"            , "stage ALL files that have been changed/added/deleted"
    , "git log -NUMB"          , "View a list of the most recent <code>NUMB</code> commits; e.g. <code>git log -2</code> will show 2 commits"
    , "git add FILE"           , "Stage a specific <code>FILE</code>"
    , "git commit -m 'MESSAGE'", "Commit changes with short <code>MESSAGE</code>"
    , "git push origin BRANCH" , "Push to specific <code>BRANCH</code>"
    , "git pull origin BRANCH" , "Pull from specific <code>BRANCH</code>"
    , "git fetch origin BRANCH", "See if there are any changes/updates from a specific <code>BRANCH</code>; could do this prior to <code>git pull</code>"
    , "git diff FILE"          , "View changes for a specific <code>FILE</code>; if you just use <code>git diff</code> all changes for all files will be shown. If you have a lot of changes it will end with an <code>(END)</code> on the screen, to quit this screen press the <b>Q</b> key"
    , "git diff --stat --cached origin/BRANCH", "List of files that have been commited (list of files that will be included in next <code>git push</code>)"
    , "git reset"                , "Undo <code>git add</code>; will un-stage all files; can also use <code>git reset FILE</code> to unstage specific file"
    , "git checkout FILE"      , "Revert <code>FILE</code> to most recent commit on local repo"
    , "git checkout BRANCH"    , "Switch to a specific <code>BRANCH</code>"
    , "git checkout -b BRANCH" , "Create a new <code>BRANCH</code> and switch to that <code>BRANCH</code>"
    , "git branch -av"         , "View all of the branches (local and remote)"
    , "git remote prune origin", "Prune all stale branches from origin"
  ) %>%
  arrange(Command) %>%  #put in alphabetical order 
  mutate(Command = paste0("<code>", Command, "</code>")) %>% 
  kable(escape = F, label = "Git Commands") %>%  #escape = F --> allows conversion of html code
  kable_styling(
     bootstrap_options = c(
         "hover" #highlight row when hover over it 
        , full_width = FALSE #doesn't have to be full width 
      )
  )
```
:::

**What if I want to ignore any differences on my clone and 'reset' to the version on GitHub?** 

1. `git fetch origin <branch>`  
This will get the most recent versions from GitHub  
1. `git reset --hard origin/<branch>`  
This will change all files in your clone repository to match the most up-to-date version from GitHub  

This should be done rarely because any changes you have worked on will not be saved.  


## UNIX  

In addition to git command, you can use UNIX commands in the bash window.  

::: {.size_85em}
```{r}
tribble(
          ~Command, ~Description
    , "ls -l"   , "View files in current folder and their recent mondification"
    , "cd FOLDER", "Move down into a specific folder; e.g. go from <code>C:/Documents</code> to <code>C:/Documents/FOLDER</code>" 
    , "cd ..", "Move up one folder; e.g. go from <code>C:/Documents/FOLDER</code> to </code>C:/Documents</code>"
  ) %>%
  arrange(Command) %>%  #put in alphabetical order 
  mutate(Command = paste0("<code>", Command, "</code>")) %>% 
  kable(escape = F) %>%
  kable_styling(
     bootstrap_options = c(
         "hover" #highlight row when hover over it 
        , full_width = FALSE #doesn't have to be full width 
      )
  )
```
:::


