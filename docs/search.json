[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git Started",
    "section": "",
    "text": "git is more scared of you than you are of git"
  },
  {
    "objectID": "gitstarted.html",
    "href": "gitstarted.html",
    "title": "1  Git Started",
    "section": "",
    "text": "Go to git-scm.com/download and click on the “Windows” link under “Downloads on the main screen.\n\nNote: when installing git, can update name for default branch\nUpdate Git Bash for Windows\ngit update-git-for-windows\n\n\n\n\n\nGo to github.com and click either on the large green button “Sign Up for GitHub” in the middle of the page or the small button “Sign Up” in the top right corner of the page.\n\n\n\n\n\n\nCreate your own personal username\nType in your email (you can add multiple emails to an account after finishing setup, so you can use both personal and organization emails)\nCreate your personal password\nClick on the large blue button “Create account”\n\n\nOptional: un-check box so you don’t receive additional emails from GitHub\nNote: You may have to ‘verify’ account by completing some Captcha.\n\n\n\n\n\nDepending on your groups set-up you may get access to a group of repositories by receiving an invitation to a GitHub Organization. You may also receive an invitation to a specific repository as well."
  },
  {
    "objectID": "gitstarted.html#basic-git-processes",
    "href": "gitstarted.html#basic-git-processes",
    "title": "1  Git Started",
    "section": "1.2 Basic Git PRocesses",
    "text": "1.2 Basic Git PRocesses\n\n1.2.1 Create Clone\n\n\nGo to repository webpage\n\n\nClick on the green “Code” button and copy the HTTPS path using the clipboard button\n\n\n\nGo to the place on your machine where you want to have the code\n\nNote: Interacting with GitHub will be much faster if you put the code directly on your machine rather than on your personal hal folder. I like to keep all my clones C:\\PROJECT-CLONES. This also makes the pathways shorter because it doesn’t inlcude your name.\n\n\nRight click in the folder and select “Git Bash Here”\n\n\n\nGit Bash window will appear with the path reflecting the path\n\n\n\nWrite the command git clone REPO_HTTPS_PATH where REPO_HTTPS_PATH is the url from step 1; press Enter\n\nNote: You can’t copy/paste using Ctr+C/Ctr+V, but you can copy/paste using Ctr+C/Shift+Insert\n\n\nA folder will appear which has the same name as the repository, all files from the repo will be download there (in this example it’s just a README.md file)\n\n\n\n\n\n1.2.2 Make Edits to Code\n\n\nGo into repository folder on machine, right click and select “Git Bash Here”\n\n\nPRIOR TO MAKING ANY EDITS PULL MOST RECENT CODE FROM REPO: git pull origin BRANCH\n\nMost often the BRANCH you will be working on is main or master. The branch you are working on will show up in blue font in parenthesis in the git bash window. Pulling the most recent code is essential for collaborative coding, this helps prevents conflicts to the code if edits are made on multiple different versions.  Example: Code on Machine Already Up-to-Date (no changes were made)   Example: Code on Machine Updated (changes to code on machine) \n\nAfter you have pulled any changes, now you can start editing your document\n\n\nAfter edits are complete, repeat step 1 to open the git bash window\n\n\nSee which files were added, edited, or deleted using git status\n\nIn this case, I have made edits to the README.md file.\n\n\nReview the changes by using git diff\n\ngit diff will show all changes for any file, if you only want to look at changes for a specific file use git diff FILE.\nRed font means that text has been deleted and green font means that text has been added.\n\n\nOnce you are comfortable with your changes you need to stage the files, or ‘add’ them so they can be committed.\n\n\n\ngit add --all will stage all files that are listed after the git status command\n\n\ngit add FILE will add only a specific file\n\n\ngit add *.R will add all files that have a .R extension (stage all R scripts)\n\n\n\nCheck that your files have been staged by using the git status command again, files that were in red font should now be in green font, indicating that they have been staged and are ready to be committed.\n\n\nCommit changes using git commit -m 'MESSAGE' where MESSAGE is a short description of the edits.\n\n\nFinally, push your commits to GitHub using git push origin BRANCH Most often the BRANCH you will be working on is main or master. Originally, the default branch was always called ‘master’. Starting in fall 2020, GitHub changed the default branch name to be ‘main’.\n\n\n\n\n1.2.3 Simple Review\n\nPULL: git pull origin BRANCH; to update code\nEDIT: Make edits to files\nOptional: git status to view which files have changed\nOptional: git diff to view line by line changes\nSTAGE: git add --all to stage all files\nCOMMIT:git commit -m 'MESSAGE' to commit changes\nPUSH: git push origin BRANCH to send changes to GitHub so others can access\n\n\n\n1.2.4 Update Remote Link\n\n\nGo into repository on GitHub, click the green “Code” button and copy the HTTPS url\n\n\nGot to the repository folder on your machine, right click and select “Git Bash Here”\n\n\nChange the remote link with the following:\ngit remote set-url origin NEW_URL\n\nCheck to see if the link has been updated using:\ngit config --get remote.origin.url\nThe URL should now be the updated version."
  },
  {
    "objectID": "commands.html#git-commands",
    "href": "commands.html#git-commands",
    "title": "2  Common Commands",
    "section": "2.1 Git Commands",
    "text": "2.1 Git Commands\n\n\n\n\n\n \n  \n    Command \n    Description \n  \n \n\n  \n    git add --all \n    stage ALL files that have been changed/added/deleted \n  \n  \n    git add FILE \n    Stage a specific FILE \n  \n  \n    git checkout -b BRANCH \n    Create a new BRANCH and switch to that BRANCH \n  \n  \n    git checkout BRANCH \n    Switch to a specific BRANCH \n  \n  \n    git checkout FILE \n    Revert FILE to most recent commit on local repo \n  \n  \n    git commit -m 'MESSAGE' \n    Commit changes with short MESSAGE \n  \n  \n    git diff --stat --cached origin/BRANCH \n    List of files that have been commited (list of files that will be included in next git push) \n  \n  \n    git diff FILE \n    View changes for a specific FILE; if you just use git diff all changes for all files will be shown. If you have a lot of changes it will end with an (END) on the screen, to quit this screen press the Q key \n  \n  \n    git fetch origin BRANCH \n    See if there are any changes/updates from a specific BRANCH; could do this prior to git pull \n  \n  \n    git log -NUMB \n    View a list of the most recent NUMB commits; e.g. git log -2 will show 2 commits \n  \n  \n    git pull origin BRANCH \n    Pull from specific BRANCH \n  \n  \n    git push origin BRANCH \n    Push to specific BRANCH \n  \n  \n    git reset \n    Undo git add; will un-stage all files; can also use git reset FILE to unstage specific file \n  \n  \n    git status \n    see which files have been changed/added/deleted on working branch \n  \n\n\n\n\n\n\nWhat if I want to ignore any differences on my clone and ‘reset’ to the version on GitHub?\n\ngit fetch origin <branch>\nThis will get the most recent versions from GitHub\n\ngit reset --hard origin/<branch>\nThis will change all files in your clone repository to match the most up-to-date version from GitHub\n\nThis should be done rarely because any changes you have worked on will not be saved."
  },
  {
    "objectID": "commands.html#unix",
    "href": "commands.html#unix",
    "title": "2  Common Commands",
    "section": "2.2 UNIX",
    "text": "2.2 UNIX\nIn addition to git command, you can use UNIX commands in the bash window.\n\n\n\n\n\n \n  \n    Command \n    Description \n  \n \n\n  \n    cd .. \n    Move up one folder; e.g. go from C:/Documents/FOLDER to C:/Documents \n  \n  \n    cd FOLDER \n    Move down into a specific folder; e.g. go from C:/Documents to C:/Documents/FOLDER \n  \n  \n    ls -l \n    View files in current folder and their recent mondification"
  },
  {
    "objectID": "process.html#rename-default-branch-from-master-to-main",
    "href": "process.html#rename-default-branch-from-master-to-main",
    "title": "3  Common Processes",
    "section": "3.1 Rename Default Branch from Master to Main",
    "text": "3.1 Rename Default Branch from Master to Main\nOn GitHub’s website click on  # branches icon at the top left of the code on the home page of a repository. You should see a window that specifies all the current branches as well as the default branch. Click on the edit icon (pencil on far right) to rename a branch.\nAfter renaming the branch on the web interface, then go to your local clone, open bash and type in the following:\ngit branch -m master main\ngit fetch origin\ngit branch -u origin/main main\ngit remote set-head origin -a"
  },
  {
    "objectID": "process.html#cache-github-credentials---windows",
    "href": "process.html#cache-github-credentials---windows",
    "title": "3  Common Processes",
    "section": "3.2 Cache GitHub Credentials - Windows",
    "text": "3.2 Cache GitHub Credentials - Windows\nOld way, view in Wayback Machine\nNew way, using GitHub CLI or Git Credential Manager\n\nAfter installing git on a new machine, I cloned a test repository (via an RStudio .Rproj) made a small text edit and committed the change. When I tried to push the commit to GitHub the following window popped-up asking me to sign in. I selected Sign in with your browser.\n\n\nAfter selecting Sign in with your browser, a window popped up in my default browser where I signed in to my GitHub account. The next screen asked to authorize the credential manager, which I did by selecting Authorize GitCredentialManager.\n\n\nAfter selecting Authorize GitCredentialManger the following screen appeared stating that authentication succeeded. After this, I am able to push/pull from my machine to GitHub."
  },
  {
    "objectID": "process.html#git-bash-terminal-in-r-studio",
    "href": "process.html#git-bash-terminal-in-r-studio",
    "title": "3  Common Processes",
    "section": "3.3 Git Bash Terminal in R Studio",
    "text": "3.3 Git Bash Terminal in R Studio\nTools > Global Options > Terminal > New Terminals open with: Git Bash"
  },
  {
    "objectID": "flowcharts.html#commands",
    "href": "flowcharts.html#commands",
    "title": "4  Flow Charts",
    "section": "4.2 Commands",
    "text": "4.2 Commands"
  }
]